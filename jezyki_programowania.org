#+title: Jezyki Programowania

* Jezyki programowania 1
** Pierwszy wykład
*** Różnica między mocnym a słabym typowaniem
+ silne typowanie
  + wartości mają swój nie zmienny typ
  + można używać tylko zgodnie z tym typem
+ słabe typowanie
  + typ zmiennej zależy od kontekstu w którym jest użyty
*** Rodzaje typowania
**** typowanie statyczne
identyfikator zmiennej również zapisuje typ tej zmiennej, co nie pozwala zmiany
**** typowanie dynamiczne
identyfikator nie zapisuje typu zmiennej
*** wartości i zmienne w scali
#+begin_src scala
val wartość = "stała wartość"
var zmienna = "zmienna wartość"
#+end_src
val w scali nie pozwala na zmiane wartości, kiedy var ma zmienną wartość
*** problem zmiennych
Zmienne wprowadzają problemy do programów, a w szczególności zmienne globalne.
Powinno się ich jak najmniej używać. Te problemy wraz z zwiększeniem się
programu się potęgują. Wprowadzanie większej ilości zmiennych prawdopodobnie zwiększa trudność w śledzeniu co się dzieje w kodzie
*** paradygmaty programowania
+ imperatywne
+ deklaratywne
+ strukturalne
+ proceduralne
+ funkcyjne (aplikatywne)
+ obiektowe
  + oparte o "klasy" lub "prototypy"
+ zdarzeniowe
+ w logice
+ ...
*** imperatywny a funkcyjny sposób programowania
|--------------------------------------------------------+--------------------------------------------------------|
| imperatywny                                            | funkcyjny                                              |
|--------------------------------------------------------+--------------------------------------------------------|
| Ciągi instrukcji określają sposó rozwiązania problemu  | metoda rozwiązania zależy od postaci danych            |
| instrukcje zmieniają stan, niezbędne są zmienna        | stan nie ulega modyfikacji                             |
| kolejność wykonywania instrukcji jest bardzo istotna   | kolejność wykonywania obliczeń jest mało istotana      |
| główne mechanizmy obliczeniowe to podstawienie i pętla | główne mechanizmy to zastosowanie funkcji i rekurencja |
|--------------------------------------------------------+--------------------------------------------------------|

*** cechy scali
+ statycznie typowana
+ zwięzła i _elegancka_ _składnia_
+ środowisko JVM
+ udane _połączenie_ programowania
  + imperatywnego
  + funkcyjnego
  + obiektowego
+ duża skalowalność
** wymagania
+ linux
+ VS****
+ sbt
*** wtyczki do VS****
+ Scala Syntax (official)
** właściwości
+ strongly typed - nie da wsadzać double do inta
+ może być parę main funkcji
  + przy kompilacji będzie się wybierać który main ma zostać wykonany
+ Unit zbytnio nic nie zwraca
** setup
sbt new wpug/scala3-sbt.g8
+ rozszerzenia .scala
** struktura startowa
#+begin_src scala
@main def mainProg: Unit = {
    println("Hello World!")
}
#+end_src
** start projektu
+ cd labXX
+ sbt - rozpocznie kompilacje
+ sbt new wpug/scala3-sbt.g8
** polecenia sbt
+ compile
+ run
+ reStart {wartości do przekazania}
+ reStop
+ reStatus
** funkcje
+ val
  #+begin_src scala
val napis = "Hello"
  #+end_src
+ function
  #+begin_src scala
def func_name(variable:type):Return_Unit {
    body
}
  #+end_src
  oznaczenie zwracanej jednostki nie jest wymagane, scala może sama to znaleźć
  jest natomiast zalecane, aby jednak definiować wartość zwracaną
+ println - print line
  #+begin_src scala
println("wiadomość")
  #+end_src
+ if
  #+begin_src scala
if ( condition ) {
    // true
} else {
    // false
}
  #+end_src
+ Random
  #+begin_src scala
val rand = scala.util.Random()
val liczba = rand.nextInt(100) //wygeneruje liczbę w zakresie 0-100
// można zapisać tak:
scala.util.Random().nextInt(100)
  #+end_src

* Jezyki programowania 2
** informacje wstępne
*** potrzebne programy
+ nodejs
*** hasło
+ jp2_2@23
** javascript basics
*** zmienne
+ let - zmienna o zmiennym typie
+ const - niezmienna zmienna kek
*** funkcje
+ console.log() - print w konsoli
**** if
#+begin_src javascript
if ( condition ) {
    "do when true"
} else {
    "do when false"
}
#+end_src
**** for loop
#+begin_src javascript
for ( declare variable; condition; variable change ) {
    "do in loop"
}
#+end_src
*** informacje
+ język słabo typowany - zmienna nie mają stałego typu
+ średniki nie są potrzebne
+ porównuje się używając `===` aby porównać wartość i typ
